# KeyCloak Operator image build
parameters:
- name: SourceImageName
  type: string
  default: 'outsystems-keycloak-operator'
- name: SourceImageTag
  type: string
  default: '$(Build.BuildNumber)'

variables:
  - group: 'KeyCloak'
  - name: DOCKER_BUILDKIT #This is needed for multistage Dockerfile, in order that we have 1 final image created. Also needed in case the Dockerfile is more 'conditional'
    value: 1
  - name: AWSCredentials
    value: 'AWS big-crunch'
  - name: ServiceConnection
    value: 'SDLC EdenStage'
  - name: agent
    value: 'cdagent'
  - name: emailAgent
    value: 'rd.productivity.team@outsystems.com'

trigger: none

pr: none

stages:
  ####################
  # Stage for Verify
  ###################
  - stage: MainStage
    displayName: Main Stage
    jobs:

      - job: JobBuild
        displayName: Build Image
        pool:
          vmimage: 'ubuntu-20.04'
        steps:
          - script: docker login -u ${Agent} -p ${Pass} docker.pkg.github.com
            displayName: Logging into GitHub Package Registry
            env:
              Agent: ${{variables.agent}}
              AgentEmail: ${{variables.emailAgent}}
              Pass: $(cdagent)
          ###################
          # Build Docker Image
          ###################
          - task: Docker@2
            displayName: 'ðŸ“¦ Build Docker Image'
            inputs:
              command: 'build'
              containerRegistry: ${{variables.ServiceConnection}}
              repository: ${{ parameters.SourceImageName }}
              tags: |
                ${{ parameters.SourceImageTag }}
              arguments: >
                -t ${{ parameters.SourceImageName }}:${{parameters.SourceImageTag}}
          - script: docker push ${{ parameters.SourceImageName }}:${{parameters.SourceImageTag}}
            displayName: Pushing Docker image to GitHub Package Repository
#            ####################
#            # Check generated docker images
#            ###################
#          - task: CmdLine@2
#            displayName: 'ðŸ‘€ Docker Images view'
#            inputs:
#              script: |
#                docker images -a
#            ####################
#            # Create Docker Save Image
#            ###################
#          - task: ECRPushImage@1
#            displayName: 'ðŸ“¤ Publish Image to ECR'
#            inputs:
#              awsCredentials: '${{variables.AwsCredentials}}'
#              regionName: 'eu-west-1'
#              imageSource: 'imagename'
#              sourceImageName: '${{parameters.SourceImageName}}'
#              sourceImageTag: '${{parameters.SourceImageTag}}'
#              repositoryName: '${{parameters.SourceImageName}}'
#              pushTag: '${{parameters.SourceImageTag}}'
#              autoCreateRepository: true
#            ####################
#            # Push image to ACR
#            ###################
#          - task: Docker@2
#            displayName: ðŸ“¤ Push Image to ACR
#            inputs:
#              command: push
#              containerRegistry: ${{variables.ServiceConnection}}
#              repository: '${{parameters.SourceImageName}}'
#              tags: |
#                ${{ parameters.SourceImageTag }}